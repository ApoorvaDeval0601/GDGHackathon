from dotenv import load_dotenv
import os
import google.generativeai as genai
 
# Load environment variables from .env file
load_dotenv()
 
# Get API key from environment variable
API_KEY = os.getenv('GEMINI_API_KEY')
 
if not API_KEY:
    raise ValueError("GEMINI_API_KEY not found in .env file. Please add your API key.")
 
# Configure the Google Gemini API client with the API key
genai.configure(api_key=API_KEY)
 
print("Gemini API key configured successfully.")
 
class AnalystAgent:
    """
    AnalystAgent connects to Google Gemini API and performs AI analysis
    on prompts and structured data contracts using prompt engineering.
    """
 
    def __init__(self):
        # Initialize the Gemini model; 'gemini-2.5-flash' is the model name
        self.model = genai.GenerativeModel('gemini-2.5-flash')
 
    def analyze(self, prompt: str) -> str:
        """
        Send a text prompt to Gemini API and return the generated response text.
 
        Args:
            prompt (str): The text prompt to analyze.
 
        Returns:
            str: The response text generated by Gemini.
        """
        response = self.model.generate_content(prompt)
        return response.text
 
    def analyze_data_contract(self, data_contract: dict) -> str:
        """
        Accept a structured data contract dictionary, craft a prompt,
        and return detailed JSON analysis including extra insights.
 
        Args:
            data_contract (dict): The structured input data to analyze.
 
        Returns:
            str: The generated JSON text containing analysis and "wow" data points.
        """
        prompt = (
            f"Analyze this data contract: {data_contract}. "
            "Also provide Market Impact Score and Key Figures Mentioned in JSON format."
        )
        return self.analyze(prompt)
 
 
if __name__ == "__main__":
    # Create an instance of AnalystAgent
    agent = AnalystAgent()
 
    # Test the analyze method with a simple prompt
    prompt_text = "Summarize key AI trends impacting fintech in 2025."
    result = agent.analyze(prompt_text)
    print("=== Plain Prompt Analysis ===")
    print(result)
 
    # Define a sample data contract dictionary relevant to your hackathon
    sample_data_contract = {
        "market": "fintech",
        "technology": "AI adoption",
        "timeframe": "Q3 2025"
    }
 
    # Use analyze_data_contract to analyze structured data and get detailed insights
    contract_result = agent.analyze_data_contract(sample_data_contract)
    print("\n=== Data Contract Analysis with Enhanced Insights ===")
    print(contract_result)